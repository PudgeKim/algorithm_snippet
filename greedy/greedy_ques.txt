# 백준 로프

# 백준 강의실 배정 11000번

(시작시간, 종료시간)이 있을 때 강의실 최소개수 구하기
1. 시작시간 순으로 오름차순 정렬
2. 종료시간 기준으로 최소 힙 이용
3. 힙 최상단 종료시간보다 시작시간이 작으면 answer += 1 하고 heappop

# 백준 회의실 배정

강의실 배정과 다른점은 회의실은 1개이고 최대 회의 개수를 구해야함
1. 종료시간을 기준으로 오름차순 정렬 (회의가 빨리 끝나야 많이 할 수 있으므로)
(1번에서 정렬시에 lambda x: (x[1], x[0]) 이렇게 시작시간도 고려해서 정렬)
2. 종료시간보다 같거나 큰 회의들 선택 후 종료시간 갱신

# 백준 캠핑문제

(순위, 순위)가 있을 때 다른 지원자에게 뒤쳐지지 않는 개수 구하기
조건: 동석차 없음, 모든 지원자랑 비교해서 최소한 하나가 뒤떨어지지않아야함
1. 둘중에 하나로 오름차순 정렬(첫째순위로 정렬했다고 가정)
2. 순위 변수하나 만들고 두번째 순위보다 낮을때마다 갱신하고 순위변수도 갱신

# 백준 멀티탭 스케줄링

원래는 미래를 알 수 없기에 가장 나중에 쓰이는 걸 빼는 것을 구현하는 것은
힘들지만 input값으로 알 수 있다면 가장 나중에 쓰는 걸 뺀다.

# 릿코드 122

prices = [7,1,5,3,6,4]
1 사고 5에 팔고 3에사고 6에팔아서 최대값 7
하나를 구매한상태로 또 구매못함 무조건 팔고 구매해야함

def maxProfit(self, prices: List[int]) -> int:
        answer = 0
        for i in range(len(prices)-1):
            if prices[i+1] > prices[i]:
                answer += prices[i+1] - prices[i]
        
        return answer
